@model ConoPizzaWeb.Models.Products.ProductEditViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@using ConoPizzaWeb.Models.Ingredients

@{
    ViewData["Title"] = "Edit Product";
}

<style>
    .Content-middle {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .create-container {
        width: 700px;
        max-width: 700px;
        overflow-y: auto;
        overflow-x: hidden;
        max-height: calc(100vh - 200px);
        margin-top: 6rem;
        background: #f9f9f9;
        padding: 20px 30px;
        border-radius: 8px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        font-family: Arial, sans-serif;
    }

    /* Form title */
    .form-title {
        color: var(--first-color);
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        border-bottom: 2px solid #e5e7eb;
        padding-top: 10px;
        padding-bottom: 30px;
    }

    /* Form section and input styling */
    .form-section {
        display: flex;
        flex-direction: column;
    }

    .styled-input {
        border: 1px solid var(--first-color);
        border-radius: 4px;
        padding: 10px;
        transition: border-color 0.3s;
    }

        .styled-input:focus {
            border-color: var(--first-color);
            box-shadow: 0 0 5px rgba(41, 155, 228, 0.5);
        }

    /* Button styling */
    .btn-create {
        background-color: var(--first-color);
        border-color: var(--first-color);
        padding: 10px 20px;
        color: #ffffff;
        font-size: 16px;
        border-radius: 4px;
        margin-right: 20px;
        margin-left: 43px;
        margin-top: 21px;
        transition: transform 0.3s ease;
        cursor: pointer;
        border: none;
        box-shadow: 0 0 11px rgba(0, 0, 0, 0.15);
    }

        .btn-create:hover {
            background-color: tomato;
            border-color: tomato;
            transform: scale(1.1);
        }

    /* Back to List link styling */
    .btn-secondary {
        background-color: #f2f2f2;
        color: #566787;
    }

        .btn-secondary:hover {
            background-color: #ddd;
            color: #333;
        }

    /* Error message styling */
    .text-danger {
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }

    /* Floating label styles for input fields */
    .input-container {
        position: relative;
        margin-bottom: 25px;
        margin-top: 25px;
    }

        .input-container label {
            position: absolute;
            top: 0px;
            left: 0px;
            font-size: 16px;
            color: #000000;
            transition: all 0.5s ease-in-out;
            pointer-events: none; /* Prevent label from blocking input clicks */
        }

        .input-container input {
            border: 0;
            border-bottom: 1px solid #000000;
            background: transparent;
            width: 100%;
            padding: 8px 0 5px 0;
            font-size: 16px;
            color: #000000;
        }

    .Created input {
        padding: 19px 0 5px 0;
    }


    .input-container input:focus {
        border: none;
        outline: none;
        border-bottom: 2px solid var(--first-color);
    }

        .input-container input:focus ~ label,
        .input-container input:valid ~ label {
            top: -12px;
            font-size: 12px;
            color: var(--first-color); /* Optional: Change label color on focus */
        }

    /* Adjusted styling for the select dropdown */
    .styled-select {
        border: 1px solid var(--first-color);
        border-radius: 4px;
        padding: 10px;
        background-color: #f9f9f9;
        color: #333;
        font-size: 16px;
        width: 100%;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        transition: border-color 0.3s;
    }

        .styled-select:focus {
            border-color: var(--first-color);
            box-shadow: 0 0 5px rgba(41, 155, 228, 0.5);
            outline: none;
        }

    /* Adjust label positioning */
    .input-container select ~ label {
        top: -17px;
        font-size: 12px;
        color: var(--first-color); /* Optional: Change label color on focus */
    }

    /* Back to List link styling */
    .btn-secondary {
        display: inline-block; /* Make it behave like a button */
        background-color: #f2f2f2;
        color: #566787;
        text-decoration: none; /* Remove underline */
        padding: 10px 20px; /* Padding to match btn-create */
        border-radius: 4px; /* Same border radius as other buttons */
        transition: background-color 0.3s, color 0.3s; /* Smooth transition */
        margin-left: 10px; /* Add margin for spacing */
        margin-top: 21px;
    }

        .btn-secondary:hover {
            background-color: #ddd;
            color: #333;
        }

    /* Textarea styling */
    .styled-textarea {
        border: 1px solid #000000; /* Match input borders */
        border-radius: 4px;
        padding: 10px;
        width: 100%;
        font-size: 16px;
        font-family: Arial, sans-serif;
        background-color: #f9f9f9; /* Match the container background */
        color: #333;
        resize: none; /* Prevent resizing */
        transition: border-color 0.3s, box-shadow 0.3s;
    }

        .styled-textarea:focus {
            border-color: var(--first-color); /* Highlight on focus */
            box-shadow: 0 0 5px rgba(41, 155, 228, 0.5);
            outline: none; /* Remove default outline */
        }

    /* Floating label effect for textarea */
    .input-container textarea:focus + label,
    .input-container textarea:not(:placeholder-shown) + label {
        top: -20px;
        font-size: 12px;
        color: var(--first-color);
        background-color: #f9f9f9;
        padding: 0 4px;
        margin-left: -4px;
    }

    /* Placeholder to prevent misalignment */
    .styled-textarea::placeholder {
        color: transparent;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.3);
        width: 600px;
        height: 100%;
        background-color: #ffffff;
        padding: 10px 30px 40px;
    }

        .card h3 {
            font-size: 22px;
            font-weight: 600;
        }

    .drop_box {
        margin: 10px 0;
        padding: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        border: 3px dotted #a3a3a3;
        border-radius: 5px;
    }

        .drop_box h4 {
            font-size: 16px;
            font-weight: 400;
            color: #2e2e2e;
        }

        .drop_box p {
            margin-top: 10px;
            margin-bottom: 20px;
            font-size: 12px;
            color: #a3a3a3;
        }

    .butoni {
        text-decoration: none;
        background-color: var(--first-color);
        color: #ffffff;
        padding: 10px 20px;
        border: none;
        outline: none;
        transition: 0.3s;
    }

        .butoni:hover {
            text-decoration: none;
            background-color: #ffffff;
            color: var(--first-color);
            padding: 10px 20px;
            border: none;
            outline: 1px solid #010101;
        }

        .butoni.selected {
            background-color: #28a745; /* Green background */
            color: #ffffff; /* White text */
            border: none;
        }

    /* Style for the file name display */
    .file-name {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        color: #333;
        font-weight: bold;
    }

    /* Red button for unsupported files */
    .butoni.unsupported {
        background-color: #dc3545; /* Red background */
        color: #ffffff; /* White text */
        border: none;
    }

    /* Add shake animation for visual feedback */
    .butoni.shake {
        animation: shake 0.5s ease-in-out;
    }

    @@keyframes shake {
        0% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        50% {
            transform: translateX(5px);
        }

        75% {
            transform: translateX(-5px);
        }

        100% {
            transform: translateX(0);
        }
    }


    .form input {
        margin: 10px 0;
        width: 100%;
        background-color: #e2e2e2;
        border: none;
        outline: none;
        padding: 12px 20px;
        border-radius: 4px;
    }

    #images-files-btn {
        height: 40px;
        padding: 8px 16px;
        width: auto;
        line-height: 24px;
        background-color: #fff;
        color: #363636;
        border-radius: 5px;
        background: #fff;
        border: 1px solid #e5e7eb;
        margin: 6px 8px;
        box-shadow: 0 5px 10px rgba(0, 0, 0, .03);
    }

    #images-files-icon svg {
        transition: fill 0.3s ease;
    }

    #images-files-btn.active #images-files-icon svg {
        fill: green;
    }

    .transition-container {
        max-height: 0; /* Collapsed state */
        opacity: 0; /* Fully hidden */
        overflow: hidden; /* Prevent content from spilling out */
        transition: max-height 0.5s ease, opacity 0.5s ease; /* Smooth transition */
    }

        /* Expanded state */
        .transition-container.visible {
            max-height: 500px; /* Adjust to fit the largest expected section content */
            opacity: 1; /* Fully visible */
        }

    .hidden {
        display: none !important;
    }

    .visible {
        display: block !important;
    }

    .Btop {
        justify-content: flex-end;
        display: flex;
        border-top: 2px solid #e5e7eb;
    }

    .extra-item{
    display:flex;
    gap:2rem;
    }
</style>

<div class="Content-middle">
    <div class="create-container">
        <h2 class="form-title">Edit Product</h2>
        <div class="form-section">
            <form asp-action="EditProduct" method="post" enctype="multipart/form-data">
                <!-- Pass the ProductId to the POST -->
                <input type="hidden" asp-for="ProductId" />

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <!-- Product Title -->
                <div class="form-group input-container">
                    <input asp-for="Title" class="form-control" required />
                    <label asp-for="Title" class="control-label">Product Title</label>
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <!-- Product Description -->
                <div class="form-group input-container">
                    <textarea asp-for="Description" class="styled-textarea" rows="4" placeholder=" "></textarea>
                    <label asp-for="Description" class="control-label" style="margin-top:10px 0px;">Product Description</label>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <!-- Image Upload (optional new image) -->
                <div class="form-group input-container" id="images-files-section">
                    <div class="card">
                        <div class="drop_box">
                            <header>
                                <h4>Upload a new photo (optional)</h4>
                            </header>
                            <p>Supported: PDF, JPG, PNG (max 5MB)</p>

                            <!-- Hidden file input -->
                            <input asp-for="ImageFile"
                                   class="form-control"
                                   type="file"
                                   id="fileID"
                                   accept=".pdf,.jpg,.png"
                                   style="display:none;">

                            <button type="button" class="butoni" id="fileSelectButton">
                                Choose Image
                            </button>

                            <!-- If there's an existing image, show it first -->
                            @if (!string.IsNullOrEmpty(Model.ExistingImageUrl))
                            {
                                <div id="currentImageContainer">
                                    <p>Current Image:</p>
                                    <img src="@Model.ExistingImageUrl"
                                         alt="Current Image"
                                         style="max-width: 200px; margin-bottom: 10px;" />
                                </div>
                            }

                            <span id="fileNameDisplay" class="file-name"></span>

                            <img id="imgPreview"
                                 src="#"
                                 alt="Preview"
                                 style="max-width: 200px; margin-top: 10px; display: none;" />
                        </div>
                    </div>
                </div>

                <!-- Category Selection -->
                <div class="form-group input-container">
                    <select asp-for="CategoryId" class="styled-select" id="categorySelect">
                        <option value="">-- Select Category --</option>
                        @foreach (var category in (SelectList)ViewBag.Categories)
                        {
                            <option value="@category.Value" data-category-name="@category.Text">@category.Text</option>
                        }
                    </select>
                    <label asp-for="CategoryId" class="control-label">Category</label>
                    <span asp-validation-for="CategoryId" class="text-danger"></span>
                </div>

                <!-- Is Featured Dropdown -->
                <div class="form-group input-container">
                    <select asp-for="IsFeatured" class="styled-select">
                        <option value="false">No</option>
                        <option value="true">Yes</option>
                    </select>
                    <label asp-for="IsFeatured" class="control-label">Is Featured?</label>
                    <span asp-validation-for="IsFeatured" class="text-danger"></span>
                </div>

                <!-- Price Section -->
                <div id="priceSection">
                    <!-- Single Price Input -->
                    <div class="form-group input-container" id="singlePriceContainer">
                        <input type="number" step="0.01" name="PriceSingle" class="form-control" placeholder="Enter Price" value="@(Model.PriceSingle ?? 0)" />
                        <label class="control-label">Price</label>
                    </div>

                    <!-- Multiple Price Inputs for Pizza -->
                    <div id="pizzaPriceContainer" style="display:none;">
                        <div class="form-group input-container">
                            <input type="number" step="0.01" name="PriceSmall" class="form-control" placeholder="Small Size Price" value="@(Model.PriceSmall ?? 0)" />
                            <label class="control-label">Small Size Price</label>
                        </div>
                        <div class="form-group input-container">
                            <input type="number" step="0.01" name="PriceMedium" class="form-control" placeholder="Medium Size Price" value="@(Model.PriceMedium ?? 0)" />
                            <label class="control-label">Medium Size Price</label>
                        </div>
                        <div class="form-group input-container">
                            <input type="number" step="0.01" name="PriceLarge" class="form-control" placeholder="Large Size Price" value="@(Model.PriceLarge ?? 0)" />
                            <label class="control-label">Large Size Price</label>
                        </div>
                    </div>
                </div>

                <!-- Extras Section -->
                <div id="extrasSection">
                    <h3>Extras</h3>
                    <div id="extrasContainer">
                        <!-- Pre-populate existing extras if any -->
                        @if (Model.Extras != null && Model.Extras.Any())
                        {
                            int i = 0;
                            foreach (var extra in Model.Extras)
                            {
                                <div class="extra-item">
                                    <div class="form-group input-container">
                                        <input type="text" name="Extras[@i].Name" class="form-control" style="margin:10px 0px;" value="@extra.Name" placeholder="Extra Name" required />
                                        <label class="control-label">Extra Name</label>
                                    </div>
                                    <div class="form-group input-container">
                                        <input type="number" step="0.01" name="Extras[@i].Price" class="form-control" style="margin:10px 0px;" value="@extra.Price" placeholder="Extra Price" required />
                                        <label class="control-label">Extra Price</label>
                                    </div>
                                    <button type="button" class="butoni removeExtraButton" style="height: 3rem; margin-top: 1.3rem;">Remove Extra</button>
                                </div>
                                i++;
                            }
                        }
                    </div>
                    <button type="button" class="butoni" id="addExtraButton">Add Extra</button>
                </div>

                <!-- Ingredients Section (custom dropdown) -->
                <div class="form-group input-container" style="position: relative;">
                    <h3 style="margin:10px 0px;">Ingredients</h3>

                    <!-- The "chips" area where we show selected items -->
                    <div id="selectedIngredientsContainer" style="margin-bottom:10px;"></div>

                    <!-- Container for hidden inputs. Each selected ingredient will create a hidden input with name="SelectedIngredientIds" -->
                    <div id="selectedIngredientsHiddenContainer"></div>

                    <!-- A button to toggle showing/hiding the dropdown list -->
                    <button type="button" id="toggleIngredientsDropdown" class="butoni">Select Ingredients</button>

                    <!-- The dropdown list itself (initially hidden). -->
                    <div id="ingredientsDropdown" class="hidden" style="
        border: 1px solid #ccc;
        padding: 5px;
        max-height: 200px;
        overflow-y: auto;
        position: absolute;
        background: #fff;
        z-index: 999;
        width: 300px;
        margin-top: 5px;">
                        @foreach (Ingredient ing in (IEnumerable<Ingredient>)ViewBag.Ingredients)
                        {
                            <div class="ingredientItem"
                                 style="display:flex; align-items:center; gap:8px; cursor:pointer; padding:5px;"
                                 data-id="@ing.IngredientId"
                                 data-name="@ing.Name"
                                 data-img="@ing.InImgUrl">
                                <img src="@ing.InImgUrl"
                                     alt="pic"
                                     style="width:30px; height:30px; object-fit:cover; border-radius:50%;" />
                                <span>@ing.Name</span>
                            </div>
                        }
                    </div>

                    <span asp-validation-for="SelectedIngredientIds" class="text-danger"></span>
                </div>

                <!-- Form Buttons -->
                <div class="Btop">
                    <button type="submit" class="btn-create">Save Changes</button>
                    <a asp-action="AdminMenuDashboard" class="btn-secondary">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // *** ADVANCED FILE VALIDATION (Magic Numbers) ***
        document.addEventListener("DOMContentLoaded", function() {
            const fileInput = document.getElementById("fileID");
            const fileSelectButton = document.getElementById("fileSelectButton");
            const fileNameDisplay = document.getElementById("fileNameDisplay");
            const imgPreview = document.getElementById("imgPreview");
            const currentImageContainer = document.getElementById("currentImageContainer");

            const supportedExtensions = ["pdf", "jpg", "png"];
            const maxFileSize = 5 * 1024 * 1024; // 5MB

            // Magic numbers for PDF, JPG, PNG
            const fileSignatures = {
                "pdf": [0x25, 0x50, 0x44, 0x46],
                "png": [0x89, 0x50, 0x4E, 0x47],
                "jpg": [0xFF, 0xD8]
            };

            fileSelectButton.addEventListener("click", () => {
                fileInput.click();
            });

            fileInput.addEventListener("change", () => {
                if (fileInput.files.length > 0) {
                    const file = fileInput.files[0];
                    const fileName = file.name;
                    const fileExtension = fileName.split(".").pop().toLowerCase();
                    const fileSize = file.size;

                    if (!supportedExtensions.includes(fileExtension)) {
                        showError(`.${fileExtension} is not supported`);
                        return;
                    }
                    if (fileSize > maxFileSize) {
                        showError("File is too large (max 5MB)");
                        return;
                    }

                    validateFileContent(file, fileExtension)
                        .then(isValid => {
                            if (isValid) {
                                showSuccess(fileName);
                            } else {
                                showError("Invalid file type!");
                            }
                        })
                        .catch(() => showError("Error validating file!"));
                }
            });

            function validateFileContent(file, extension) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const arr = new Uint8Array(e.target.result).subarray(0, 4); // first 4 bytes
                        const magicNumbers = fileSignatures[extension] || [];
                        if (magicNumbers.length === 0) {
                            // e.g., if extension is txt
                            resolve(true);
                        } else {
                            const isValid = magicNumbers.every((value, index) => arr[index] === value);
                            resolve(isValid);
                        }
                    };
                    reader.onerror = () => reject();
                    reader.readAsArrayBuffer(file.slice(0, 4));
                });
            }

            function showError(message) {
                fileSelectButton.textContent = message;
                fileSelectButton.classList.remove("selected");
                fileSelectButton.classList.add("unsupported", "shake");
                fileNameDisplay.textContent = "";
                setTimeout(() => fileSelectButton.classList.remove("shake"), 500);
            }

            function showSuccess(fileName) {
                fileSelectButton.textContent = "File selected";
                fileSelectButton.classList.remove("unsupported", "shake");
                fileSelectButton.classList.add("selected");
                fileNameDisplay.textContent = `Selected file: ${fileName}`;

                // Hide current image if present
                if (currentImageContainer) {
                    currentImageContainer.style.display = "none";
                }

                // Attempt an image preview
                const ext = fileName.split(".").pop().toLowerCase();
                if (ext === "jpg" || ext === "jpeg" || ext === "png") {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        imgPreview.src = e.target.result;
                        imgPreview.style.display = "block";
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                } else {
                    imgPreview.style.display = "none";
                    imgPreview.src = "#";
                }
            }

            // *** EXTRAS - Pre-populated + Add/Remove ***
            let extraIndex = @Model.Extras?.Count() ?? 0;
            const addExtraButton = document.getElementById("addExtraButton");
            const extrasContainer = document.getElementById("extrasContainer");

            // Remove existing extras
            document.querySelectorAll(".removeExtraButton").forEach(btn => {
                btn.addEventListener("click", function() {
                    btn.closest(".extra-item").remove();
                });
            });

            addExtraButton.addEventListener("click", function() {
                const extraDiv = document.createElement("div");
                extraDiv.classList.add("extra-item");
                extraDiv.innerHTML = `
                    <div class="form-group input-container">
                        <input type="text" name="Extras[${extraIndex}].Name" class="form-control" style="margin:10px 0px;" placeholder="Extra Name" required />
                        <label class="control-label">Extra Name</label>
                    </div>
                    <div class="form-group input-container">
                        <input type="number" step="0.01" name="Extras[${extraIndex}].Price" class="form-control" style="margin:10px 0px;" placeholder="Extra Price" required />
                        <label class="control-label">Extra Price</label>
                    </div>
                    <button type="button" class="butoni removeExtraButton" style="height: 3rem; margin-top: 1.3rem;">Remove Extra</button>
                `;
                extrasContainer.appendChild(extraDiv);

                extraDiv.querySelector(".removeExtraButton").addEventListener("click", function() {
                    extraDiv.remove();
                });

                extraIndex++;
            });

            // *** PRICES - Show single or pizza triple
            const categorySelect = document.getElementById("categorySelect");
            function togglePriceInputs() {
                const selectedOption = categorySelect.options[categorySelect.selectedIndex];
                const categoryName = selectedOption.getAttribute("data-category-name");
                if (categoryName && categoryName.toLowerCase() === "pizza") {
                    document.getElementById("pizzaPriceContainer").style.display = "block";
                    document.getElementById("singlePriceContainer").style.display = "none";
                } else {
                    document.getElementById("pizzaPriceContainer").style.display = "none";
                    document.getElementById("singlePriceContainer").style.display = "block";
                }
            }
            categorySelect.addEventListener("change", togglePriceInputs);
            togglePriceInputs(); // run once on load

            // *** INGREDIENTS
        const hiddenInputsContainer = document.getElementById("selectedIngredientsHiddenContainer");
        // The "chips" container
        const selectedIngredientsContainer = document.getElementById("selectedIngredientsContainer");
        // The button that toggles the dropdown
        const toggleButton = document.getElementById("toggleIngredientsDropdown");
        // The actual dropdown
        const dropdown = document.getElementById("ingredientsDropdown");

          // 2) Read the server-provided JSON
        let preselectedJson = '@Html.Raw(ViewBag.PreselectedIngredientsJson ?? "[]")';
        // parse it
        let preselectedList = JSON.parse(preselectedJson);

        // 3) Build "selectedItems" from that JSON
        let selectedItems = preselectedList.map(ing => {
            return {
                id: ing.id.toString(),
                name: ing.name,
                img: ing.img
            };
        });

               // 4) "renderSelectedChips" + "updateHiddenInputs" as normal
            function renderSelectedChips() {
                selectedIngredientsContainer.innerHTML = "";
                selectedItems.forEach(item => {
                    const chip = document.createElement("div");
                    chip.style.display = "inline-flex";
                    chip.style.alignItems = "center";
                    chip.style.background = "#eee";
                    chip.style.padding = "5px 10px";
                    chip.style.marginRight = "5px";
                    chip.style.borderRadius = "15px";
                    chip.style.marginBottom = "5px";

                    const imgEl = document.createElement("img");
                    imgEl.src = item.img;
                    imgEl.style.width = "20px";
                    imgEl.style.height = "20px";
                    imgEl.style.objectFit = "cover";
                    imgEl.style.borderRadius = "50%";
                    imgEl.style.marginRight = "5px";

                    const textEl = document.createElement("span");
                    textEl.textContent = item.name || ("Ingredient #" + item.id);

                    const removeBtn = document.createElement("span");
                    removeBtn.textContent = " x";
                    removeBtn.style.marginLeft = "8px";
                    removeBtn.style.cursor = "pointer";
                    removeBtn.addEventListener("click", function() {
                        selectedItems = selectedItems.filter(x => x.id !== item.id);
                        renderSelectedChips();
                        updateHiddenInputs();
                    });

                    chip.appendChild(imgEl);
                    chip.appendChild(textEl);
                    chip.appendChild(removeBtn);
                    selectedIngredientsContainer.appendChild(chip);
                });
            }

            function updateHiddenInputs() {
                hiddenInputsContainer.innerHTML = "";
                selectedItems.forEach(item => {
                    const input = document.createElement("input");
                    input.type = "hidden";
                    input.name = "SelectedIngredientIds";
                    input.value = item.id;
                    hiddenInputsContainer.appendChild(input);
                });
            }

            // 5) Toggle the dropdown
            toggleButton.addEventListener("click", function() {
                dropdown.classList.toggle("hidden");
            });
            document.addEventListener("click", function(e) {
                if (!dropdown.contains(e.target) && !toggleButton.contains(e.target)) {
                    dropdown.classList.add("hidden");
                }
            });

            // 6) Clicking an ingredient toggles it
            dropdown.querySelectorAll(".ingredientItem").forEach(item => {
                item.addEventListener("click", function() {
                    const id = item.getAttribute("data-id");
                    const name = item.getAttribute("data-name");
                    const img = item.getAttribute("data-img");
                    const existingIndex = selectedItems.findIndex(x => x.id === id);
                    if (existingIndex >= 0) {
                        // remove if already selected
                        selectedItems.splice(existingIndex, 1);
                    } else {
                        // add if not selected
                        selectedItems.push({ id, name, img });
                    }
                    renderSelectedChips();
                    updateHiddenInputs();
                });
            });

            // 7) On page load, show the preselected chips
            renderSelectedChips();
            updateHiddenInputs();
        });
    </script>
}

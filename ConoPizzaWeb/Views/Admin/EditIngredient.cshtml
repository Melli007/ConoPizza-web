@model ConoPizzaWeb.Models.Ingredients.IngredientViewModel

@{
    ViewData["Title"] = "Edit Ingredient";
}

<!-- We are NOT including Bootstrap here; purely using custom styles below -->

<style>
    .Content-middle {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .create-container {
        width: 700px;
        max-width: 700px;
        overflow-y: auto;
        overflow-x: hidden;
        max-height: calc(100vh - 200px);
        margin-top: 6rem;
        background: #f9f9f9;
        padding: 20px 30px;
        border-radius: 8px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        font-family: Arial, sans-serif;
    }

    /* Form title */
    .form-title {
        color: var(--first-color);
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        border-bottom: 2px solid #e5e7eb;
        padding-top: 10px;
        padding-bottom: 30px;
    }

    /* Form section and input styling */
    .form-section {
        display: flex;
        flex-direction: column;
    }

    .styled-input {
        border: 1px solid var(--first-color);
        border-radius: 4px;
        padding: 10px;
        transition: border-color 0.3s;
    }

        .styled-input:focus {
            border-color: #299be4;
            box-shadow: 0 0 5px rgba(41, 155, 228, 0.5);
        }

    /* Button styling */
    .btn-create {
        background-color: var(--first-color);
        border-color: var(--first-color);
        padding: 10px 20px;
        color: #ffffff;
        font-size: 16px;
        border-radius: 4px;
        margin-right: 20px;
        margin-left: 43px;
        margin-top: 21px;
        transition: transform 0.3s ease;
        cursor: pointer;
        border: none;
        box-shadow: 0 0 11px rgba(0, 0, 0, 0.15);
    }

        .btn-create:hover {
            background-color: tomato;
            border-color: tomato;
            transform: scale(1.1);
        }

    /* Back to List link styling */
    .btn-secondary {
        background-color: #f2f2f2;
        color: #566787;
    }

        .btn-secondary:hover {
            background-color: #ddd;
            color: #333;
        }

    /* Error message styling */
    .text-danger {
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }

    /* Floating label styles for input fields */
    .input-container {
        position: relative;
        margin-bottom: 25px;
        margin-top: 25px;
    }

        .input-container label {
            position: absolute;
            top: 0px;
            left: 0px;
            font-size: 16px;
            color: #000000;
            transition: all 0.5s ease-in-out;
            pointer-events: none; /* Prevent label from blocking input clicks */
        }

        .input-container input {
            border: 0;
            border-bottom: 1px solid #000000;
            background: transparent;
            width: 100%;
            padding: 8px 0 5px 0;
            font-size: 16px;
            color: #000000;
        }

    .Created input {
        padding: 19px 0 5px 0;
    }


    .input-container input:focus {
        border: none;
        outline: none;
        border-bottom: 2px solid var(--first-color);
    }

        .input-container input:focus ~ label,
        .input-container input:valid ~ label {
            top: -12px;
            font-size: 12px;
            color: var(--first-color); /* Optional: Change label color on focus */
        }

    /* Adjusted styling for the select dropdown */
    .styled-select {
        border: 1px solid var(--first-color);
        border-radius: 4px;
        padding: 10px;
        background-color: #f9f9f9;
        color: #333;
        font-size: 16px;
        width: 100%;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        transition: border-color 0.3s;
    }

        .styled-select:focus {
            border-color: var(--first-color);
            box-shadow: 0 0 5px rgba(41, 155, 228, 0.5);
            outline: none;
        }

    /* Adjust label positioning */
    .input-container select ~ label {
        top: -12px;
        font-size: 12px;
        color: var(--first-color); /* Optional: Change label color on focus */
    }

    /* Back to List link styling */
    .btn-secondary {
        display: inline-block; /* Make it behave like a button */
        background-color: #f2f2f2;
        color: #566787;
        text-decoration: none; /* Remove underline */
        padding: 10px 20px; /* Padding to match btn-create */
        border-radius: 4px; /* Same border radius as other buttons */
        transition: background-color 0.3s, color 0.3s; /* Smooth transition */
        margin-left: 10px; /* Add margin for spacing */
        margin-top: 21px;
    }

        .btn-secondary:hover {
            background-color: #ddd;
            color: #333;
        }

    /* Textarea styling */
    .styled-textarea {
        border: 1px solid #000000; /* Match input borders */
        border-radius: 4px;
        padding: 10px;
        width: 100%;
        font-size: 16px;
        font-family: Arial, sans-serif;
        background-color: #f9f9f9; /* Match the container background */
        color: #333;
        resize: none; /* Prevent resizing */
        transition: border-color 0.3s, box-shadow 0.3s;
    }

        .styled-textarea:focus {
            border-color: var(--first-color); /* Highlight on focus */
            box-shadow: 0 0 5px rgba(41, 155, 228, 0.5);
            outline: none; /* Remove default outline */
        }

    /* Floating label effect for textarea */
    .input-container textarea:focus + label,
    .input-container textarea:not(:placeholder-shown) + label {
        top: -20px;
        font-size: 12px;
        color: var(--first-color);
        background-color: #f9f9f9;
        padding: 0 4px;
        margin-left: -4px;
    }

    /* Placeholder to prevent misalignment */
    .styled-textarea::placeholder {
        color: transparent;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.3);
        width: 600px;
        height: 100%;
        background-color: #ffffff;
        padding: 10px 30px 40px;
    }

        .card h3 {
            font-size: 22px;
            font-weight: 600;
        }

    .drop_box {
        margin: 10px 0;
        padding: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        border: 3px dotted #a3a3a3;
        border-radius: 5px;
    }

        .drop_box h4 {
            font-size: 16px;
            font-weight: 400;
            color: #2e2e2e;
        }

        .drop_box p {
            margin-top: 10px;
            margin-bottom: 20px;
            font-size: 12px;
            color: #a3a3a3;
        }

    .butoni {
        text-decoration: none;
        background-color: var(--first-color);
        color: #ffffff;
        padding: 10px 20px;
        border: none;
        outline: none;
        transition: 0.3s;
    }

        .butoni:hover {
            text-decoration: none;
            background-color: #ffffff;
            color: var(--first-color);
            padding: 10px 20px;
            border: none;
            outline: 1px solid #010101;
        }

        .butoni.selected {
            background-color: #28a745; /* Green background */
            color: #ffffff; /* White text */
            border: none;
        }

    /* Style for the file name display */
    .file-name {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        color: #333;
        font-weight: bold;
    }

    /* Red button for unsupported files */
    .butoni.unsupported {
        background-color: #dc3545; /* Red background */
        color: #ffffff; /* White text */
        border: none;
    }

    /* Add shake animation for visual feedback */
    .butoni.shake {
        animation: shake 0.5s ease-in-out;
    }

    @@keyframes shake {
        0% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        50% {
            transform: translateX(5px);
        }

        75% {
            transform: translateX(-5px);
        }

        100% {
            transform: translateX(0);
        }
    }


    .form input {
        margin: 10px 0;
        width: 100%;
        background-color: #e2e2e2;
        border: none;
        outline: none;
        padding: 12px 20px;
        border-radius: 4px;
    }

    #images-files-btn {
        height: 40px;
        padding: 8px 16px;
        width: auto;
        line-height: 24px;
        background-color: #fff;
        color: #363636;
        border-radius: 5px;
        background: #fff;
        border: 1px solid #e5e7eb;
        margin: 6px 8px;
        box-shadow: 0 5px 10px rgba(0, 0, 0, .03);
    }

    #images-files-icon svg {
        transition: fill 0.3s ease;
    }

    #images-files-btn.active #images-files-icon svg {
        fill: green;
    }

    .transition-container {
        max-height: 0; /* Collapsed state */
        opacity: 0; /* Fully hidden */
        overflow: hidden; /* Prevent content from spilling out */
        transition: max-height 0.5s ease, opacity 0.5s ease; /* Smooth transition */
    }

        /* Expanded state */
        .transition-container.visible {
            max-height: 500px; /* Adjust to fit the largest expected section content */
            opacity: 1; /* Fully visible */
        }

    .hidden {
        display: none !important;
    }

    .visible {
        display: block !important;
    }

    .Btop {
        justify-content: flex-end;
        display: flex;
        border-top: 2px solid #e5e7eb;
    }
</style>

<div class="Content-middle">
    <div class="create-container">
        <h2 class="form-title">Create Ingredient</h2>

        <div class="form-section">
            <!-- Post to EditIngredient action -->
            <form asp-action="EditIngredient" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="Id" />

                <!-- Validation summary -->
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <!-- Ingredient Name -->
                <div class="form-group input-container">
                    <input asp-for="Name" class="form-control" required />
                    <label asp-for="Name" class="control-label">Ingredient Name</label>
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <!-- Description -->
                <div class="form-group input-container">
                    <textarea asp-for="Description"
                              class="styled-textarea"
                              rows="4"
                              placeholder=" "></textarea>
                    <label asp-for="Description" class="control-label" style="margin:10px;">Description</label>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>


                <!-- UploadFile (optional new image) -->
                <div class="form-group input-container transition-container visible" id="images-files-section">
                    <div class="card">
                        <div class="drop_box">
                            <header>
                                <h4>Zëvendësoni foton</h4>
                            </header>
                            <p>Filet suportojn: PDF, JPG, PNG (maks 5MB)</p>


                            <input asp-for="UploadFile"
                                   class="form-control"
                                   type="file"
                                   id="fileID"
                                   accept=".pdf,.jpg,.png"
                                   style="display:none;">

                            <button type="button" class="butoni" id="fileSelectButton">
                                Zgjedh Foton
                            </button>

                            <!-- If there's an existing image, show it first -->
                            @if (!string.IsNullOrEmpty(Model.ExistingImagePath))
                            {
                                <div id="currentImageContainer">
                                    <p>Current Image:</p>
                                    <img src="@Model.ExistingImagePath"
                                         alt="Current Image"
                                         style="max-width: 200px; margin-bottom: 10px;" />
                                </div>
                            }

                            <span id="fileNameDisplay" class="file-name"></span>

                            <!-- Image preview for the newly selected file -->
                            <img id="imgPreview"
                                 src="#"
                                 alt="Preview"
                                 style="max-width: 200px; margin-top: 10px; display: none;" />
                        </div>
                    </div>
                </div>

                <!-- Buttons -->
                <!-- Save / Cancel Buttons -->
                <div class="Btop">
                    <button type="submit" class="btn-create">Save</button>
                    <a asp-action="AdminMenuDashboard" class="btn-secondary">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const fileInput = document.getElementById("fileID");
            const fileSelectButton = document.getElementById("fileSelectButton");
            const fileNameDisplay = document.getElementById("fileNameDisplay");

            if (!fileInput || !fileSelectButton || !fileNameDisplay) {
                console.error("One or more elements are missing.");
                return;
            }

            const supportedExtensions = ["pdf", "jpg", "png"];
            const maxFileSize = 5 * 1024 * 1024; // 5MB

            // File magic numbers (hexadecimal values for validation)
            const fileSignatures = {
                "pdf": [0x25, 0x50, 0x44, 0x46],                // PDF
                "png": [0x89, 0x50, 0x4E, 0x47],                // PNG
                "jpg": [0xFF, 0xD8],                            // JPG/JPEG
            };

            fileSelectButton.addEventListener("click", () => {
                fileInput.click();
            });

                   fileInput.addEventListener("change", () => {
            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                const fileName = file.name;
                const fileExtension = fileName.split(".").pop().toLowerCase();
                const fileSize = file.size;

                if (!supportedExtensions.includes(fileExtension)) {
                    showError(`.${fileExtension} nuk supportohet`);
                    return;
                }

                if (fileSize > maxFileSize) {
                    showError("File është shumë i madh (max 5MB)");
                    return;
                }

                validateFileContent(file, fileExtension)
                    .then(isValid => {
                        if (isValid) {
                            showSuccess(fileName);
                        } else {
                            showError("Lloji i file-it nuk është valid!");
                        }
                    })
                    .catch(() => showError("Gabim gjatë verifikimit të file-it!"));
            }
        });

            function validateFileContent(file, extension) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();

                    reader.onload = (e) => {
                        const arr = new Uint8Array(e.target.result).subarray(0, 4); // Read first 4 bytes
                        const magicNumbers = fileSignatures[extension];

                        if (magicNumbers.length === 0) {
                            // TXT files or files with no magic numbers
                            resolve(true);
                        } else {
                            const isValid = magicNumbers.every((value, index) => arr[index] === value);
                            resolve(isValid);
                        }
                    };

                    reader.onerror = () => reject();
                    reader.readAsArrayBuffer(file.slice(0, 4)); // Read first 4 bytes of the file
                });
            }

            function showError(message) {
                fileSelectButton.textContent = message;
                fileSelectButton.classList.remove("selected");
                fileSelectButton.classList.add("unsupported", "shake");
                fileNameDisplay.textContent = "";
                setTimeout(() => fileSelectButton.classList.remove("shake"), 500);
            }

                  function showSuccess(fileName) {
                fileSelectButton.textContent = "File është zgjedhur";
                fileSelectButton.classList.remove("unsupported", "shake");
                fileSelectButton.classList.add("selected");
                fileNameDisplay.textContent = `File i zgjedhur: ${fileName}`;

                // Hide current image container if it exists
                const currentImageContainer = document.getElementById("currentImageContainer");
                if (currentImageContainer) {
                    currentImageContainer.style.display = "none";
                }

                // Attempt an image preview
                const ext = fileName.split(".").pop().toLowerCase();
                if (ext === "jpg" || ext === "jpeg" || ext === "png") {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const imgPreview = document.getElementById("imgPreview");
                        imgPreview.src = e.target.result;      // base64 string
                        imgPreview.style.display = "block";    // show
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                } else {
                    // Hide preview if not an image
                    const imgPreview = document.getElementById("imgPreview");
                    imgPreview.style.display = "none";
                    imgPreview.src = "#";
                }
            }
        });

    </script>

}

@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<ConoPizzaWeb.Models.Feedback.Feedback>

@{
    ViewData["Title"] = "Manage Feedbacks";
}

@section Styles {
    <!-- Bootstrap CSS (if not already in your layout) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
          crossorigin="anonymous">
    <style>
        .rating-stars {
            color: #ffd700;
            font-size: 1.2em;
        }

        .feedback-row {
            transition: background-color 0.2s;
        }

            .feedback-row:hover {
                background-color: #f8f9fa;
            }

        .message-preview {
            max-height: 100px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
        }
        .mt-4{
            margin-top:8rem !important;
        }

        .btn-neutral {
            color: hsl(353, 48%, 12%);
            margin: 0px 5px;
            font-style: normal;
            font-size: var(--normal-font-size);
            border: 1px solid hsl(353, 93%, 50%);
        }

            .btn-neutral:hover {
                background-color: hsl(353, 93%, 50%) !important;
                color: hsl(24, 86%, 88%);
            }

        .active > .page-link, .page-link.active {
            background-color: var(--first-color) !important;
            color: var(--body-color) !important;
            border-color: tomato !important;
        }
    </style>
    <!-- Optionally include Bootstrap JS if not in your layout -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
}

<div class="container-fluid mt-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow">
        <div class="card-header border-0 d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Customer Feedbacks</h4>
            <div>
                <button type="button" class="btn btn-sm btn-neutral" data-bs-toggle="collapse" data-bs-target="#filterOptions">
                    Filters
                </button>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="collapse" id="filterOptions">
            <div class="card-body">
                <form method="get" action="@Url.Action("ManageFeedbacks")">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <input type="text" name="searchTerm" class="form-control"
                                   placeholder="Search feedbacks..." value="@ViewBag.CurrentFilter">
                        </div>
                        <div class="col-md-3">
                            <select name="ratingFilter" class="form-select">
                                <option value="">All Ratings</option>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <option value="@i" selected="@(ViewBag.RatingFilter?.ToString() == i.ToString())">
                                        @i Star@(i > 1 ? "s" : "")
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <button type="submit" class="btn btn-neutral w-100">Apply Filters</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="thead-light">
                    <tr>
                        <th>Customer</th>
                        <th>Email</th>
                        <th>
                            <a href="@Url.Action("ManageFeedbacks", new { sortOrder = ViewBag.RatingSortParam, searchTerm = ViewBag.CurrentFilter, ratingFilter = ViewBag.RatingFilter })" style="color:var(--first-color-alt);">
                                Rating @(ViewBag.CurrentSort == "rating_desc" ? "▼" : "▲")
                            </a>
                        </th>
                        <th>Subject</th>
                        <th>
                            <a href="@Url.Action("ManageFeedbacks", new { sortOrder = ViewBag.DateSortParam, searchTerm = ViewBag.CurrentFilter, ratingFilter = ViewBag.RatingFilter })" style="color:var(--first-color-alt);">
                                Date @(ViewBag.CurrentSort == "date_desc" ? "▼" : "▲")
                            </a>
                        </th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var feedback in Model)
                    {
                        <tr class="feedback-row">
                            <td>@feedback.Emri</td>
                            <td>@feedback.Email</td>
                            <td>
                                <div class="rating-stars">
                                    @for (int i = 0; i < feedback.RatingStars; i++)
                                    {
                                        <i class="fa fa-star" aria-hidden="true"></i>
                                    }
                                </div>
                            </td>
                            <td>@feedback.Subject</td>
                            <td>@feedback.CreatedAt.ToString("g")</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-info view-message"
                                        data-message="@feedback.Mesazhi"
                                        data-bs-toggle="modal"
                                        data-bs-target="#messageModal">
                                    <i class="fa fa-eye" aria-hidden="true"></i>
                                </button>
                                <form asp-action="DeleteFeedback" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@feedback.FeedbackId" />
                                    <button type="submit" class="btn btn-sm btn-danger"
                                            onclick="return confirm('Are you sure you want to delete this feedback?')">
                                        <i class="fa fa-trash" aria-hidden="true"></i>
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (Model?.TotalItemCount > 0)
        {
            <div class="card-footer">
                <div class="row align-items-center">
                    <div class="col-sm-6 text-muted">
                        Showing @Model.FirstItemOnPage to @Model.LastItemOnPage of @Model.TotalItemCount feedbacks
                    </div>
                    <div class="col-sm-6 d-flex justify-content-end">
                        @Html.PagedListPager(Model, page => Url.Action("ManageFeedbacks", new
                            {
                                page,
                                searchTerm = ViewBag.CurrentFilter,
                                ratingFilter = ViewBag.RatingFilter,
                                sortOrder = ViewBag.CurrentSort
                            }), new PagedListRenderOptions
               {
                   LiElementClasses = new[] { "page-item" },
                   PageClasses = new[] { "page-link" },
                   DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                   DisplayLinkToNextPage = PagedListDisplayMode.Always,
                   MaximumPageNumbersToDisplay = 5,
                   LinkToNextPageFormat = "<i class='fa fa-chevron-right'></i>",
                   LinkToPreviousPageFormat = "<i class='fa fa-chevron-left'></i>"
               })
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card-footer text-muted">
                <em>No feedbacks found.</em>
            </div>
        }
    </div>
</div>

<!-- Message Modal -->
<div class="modal fade" id="messageModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Feedback Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="messageContent"></p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <!-- 1️⃣ The SignalR client library (make sure path is correct). -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

    <script>

        // 2️⃣ Build a connection to /feedbackHub
        const feedbackConnection = new signalR.HubConnectionBuilder()
            .withUrl("/feedbackHub")
            .build();

        // 3️⃣ Listen for "ReceiveFeedback" from the server
        feedbackConnection.on("ReceiveFeedback", (data) => {
            console.log("New feedback arrived:", data);
            // Add the new feedback row to the table
            addFeedbackRow(data);
        });

        // 4️⃣ Start the connection
        feedbackConnection.start()
            .then(() => console.log("Connected to FeedbackHub"))
            .catch(err => console.error("Error connecting to FeedbackHub:", err));

        // 5️⃣ A helper to dynamically add a new row to the feedback table
        function addFeedbackRow(feedback) {
            // 5.1 Find the <tbody> where feedback rows live
            const tableBody = document.querySelector("table.table tbody");
            if (!tableBody) return;

            // 5.2 We replicate the same structure your existing rows have
            // Just like your Razor loop, but in JS
            // Example:
            const starIcons = '<i class="fa fa-star" aria-hidden="true"></i>'.repeat(feedback.ratingStars);
            const createdAt = new Date(feedback.createdAt).toLocaleString();

            let newRow = document.createElement("tr");
            newRow.classList.add("feedback-row"); // same class as existing

            newRow.innerHTML = `
                <td>${feedback.emri}</td>
                <td>${feedback.email}</td>
                <td>
                    <div class="rating-stars">
                        ${starIcons}
                    </div>
                </td>
                <td>${feedback.subject}</td>
                <td>${createdAt}</td>
                <td class="text-center">
                    <!-- "View" button -->
                    <button class="btn btn-sm btn-info view-message"
                            data-message="${feedback.mesazhi}"
                            data-bs-toggle="modal"
                            data-bs-target="#messageModal">
                        <i class="fa fa-eye" aria-hidden="true"></i>
                    </button>
                    <!-- "Delete" form -->
                    <form asp-action="DeleteFeedback" method="post" class="d-inline">
                        <input name="__RequestVerificationToken"
                               type="hidden"
                               value="@@Antiforgery.GetAndStoreTokens(HttpContext).RequestToken" />
                        <input type="hidden" name="id" value="${feedback.feedbackId}" />
                        <button type="submit" class="btn btn-sm btn-danger"
                                onclick="return confirm('Are you sure you want to delete this feedback?')">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </form>
                </td>
            `;

            // 5.3 Insert at the top or bottom
            tableBody.prepend(newRow);

            // 5.4 Optionally reattach the “View” message modal event
            // (since the new row’s button won’t have a click event yet)
            attachViewMessageEvent(newRow.querySelector(".view-message"));
        }

        // Reattach the existing "view-message" modal logic
        function attachViewMessageEvent(button) {
            if (!button) return;
            button.addEventListener("click", function() {
                const message = this.getAttribute("data-message");
                const messageContent = document.getElementById("messageContent");
                messageContent.textContent = message;
            });
        }

               // 6️⃣ On DOM load, re-wire any existing “view-message” buttons (like your code)
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('.view-message').forEach(attachViewMessageEvent);
        });
    </script>
}